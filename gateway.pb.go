// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: gateway.proto

package sdp

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A union of all request made to the gateway.
type GatewayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RequestType:
	//
	//	*GatewayRequest_Query
	//	*GatewayRequest_CancelQuery
	//	*GatewayRequest_UndoQuery
	//	*GatewayRequest_Expand
	//	*GatewayRequest_UndoExpand
	//	*GatewayRequest_StoreSnapshot
	//	*GatewayRequest_LoadSnapshot
	//	*GatewayRequest_StoreBookmark
	//	*GatewayRequest_LoadBookmark
	RequestType       isGatewayRequest_RequestType `protobuf_oneof:"request_type"`
	MinStatusInterval *durationpb.Duration         `protobuf:"bytes,2,opt,name=minStatusInterval,proto3,oneof" json:"minStatusInterval,omitempty"` // Minimum time between status updates. Setting this value too low can result in too many status messages
}

func (x *GatewayRequest) Reset() {
	*x = GatewayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRequest) ProtoMessage() {}

func (x *GatewayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRequest.ProtoReflect.Descriptor instead.
func (*GatewayRequest) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{0}
}

func (m *GatewayRequest) GetRequestType() isGatewayRequest_RequestType {
	if m != nil {
		return m.RequestType
	}
	return nil
}

func (x *GatewayRequest) GetQuery() *Query {
	if x, ok := x.GetRequestType().(*GatewayRequest_Query); ok {
		return x.Query
	}
	return nil
}

func (x *GatewayRequest) GetCancelQuery() *CancelQuery {
	if x, ok := x.GetRequestType().(*GatewayRequest_CancelQuery); ok {
		return x.CancelQuery
	}
	return nil
}

func (x *GatewayRequest) GetUndoQuery() *UndoQuery {
	if x, ok := x.GetRequestType().(*GatewayRequest_UndoQuery); ok {
		return x.UndoQuery
	}
	return nil
}

func (x *GatewayRequest) GetExpand() *Expand {
	if x, ok := x.GetRequestType().(*GatewayRequest_Expand); ok {
		return x.Expand
	}
	return nil
}

func (x *GatewayRequest) GetUndoExpand() *UndoExpand {
	if x, ok := x.GetRequestType().(*GatewayRequest_UndoExpand); ok {
		return x.UndoExpand
	}
	return nil
}

func (x *GatewayRequest) GetStoreSnapshot() *StoreSnapshot {
	if x, ok := x.GetRequestType().(*GatewayRequest_StoreSnapshot); ok {
		return x.StoreSnapshot
	}
	return nil
}

func (x *GatewayRequest) GetLoadSnapshot() *LoadSnapshot {
	if x, ok := x.GetRequestType().(*GatewayRequest_LoadSnapshot); ok {
		return x.LoadSnapshot
	}
	return nil
}

func (x *GatewayRequest) GetStoreBookmark() *StoreBookmark {
	if x, ok := x.GetRequestType().(*GatewayRequest_StoreBookmark); ok {
		return x.StoreBookmark
	}
	return nil
}

func (x *GatewayRequest) GetLoadBookmark() *LoadBookmark {
	if x, ok := x.GetRequestType().(*GatewayRequest_LoadBookmark); ok {
		return x.LoadBookmark
	}
	return nil
}

func (x *GatewayRequest) GetMinStatusInterval() *durationpb.Duration {
	if x != nil {
		return x.MinStatusInterval
	}
	return nil
}

type isGatewayRequest_RequestType interface {
	isGatewayRequest_RequestType()
}

type GatewayRequest_Query struct {
	// Adds a new query for items to the session, starting it immediately
	Query *Query `protobuf:"bytes,1,opt,name=query,proto3,oneof"`
}

type GatewayRequest_CancelQuery struct {
	// Cancel a running query
	CancelQuery *CancelQuery `protobuf:"bytes,3,opt,name=cancelQuery,proto3,oneof"`
}

type GatewayRequest_UndoQuery struct {
	// Undo the specified query, if it was the last query received by the gateway. This removes it and all of its effects from the session
	UndoQuery *UndoQuery `protobuf:"bytes,4,opt,name=undoQuery,proto3,oneof"`
}

type GatewayRequest_Expand struct {
	// Expand all linked items for the given item
	Expand *Expand `protobuf:"bytes,7,opt,name=expand,proto3,oneof"`
}

type GatewayRequest_UndoExpand struct {
	// Undo the specified item expansion
	UndoExpand *UndoExpand `protobuf:"bytes,8,opt,name=undoExpand,proto3,oneof"` // TODO: CancelExpand?
}

type GatewayRequest_StoreSnapshot struct {
	// store the current session state as snapshot
	StoreSnapshot *StoreSnapshot `protobuf:"bytes,10,opt,name=storeSnapshot,proto3,oneof"`
}

type GatewayRequest_LoadSnapshot struct {
	// load a snapshot into the current state
	LoadSnapshot *LoadSnapshot `protobuf:"bytes,11,opt,name=loadSnapshot,proto3,oneof"`
}

type GatewayRequest_StoreBookmark struct {
	// store the current set of queries as bookmarks
	StoreBookmark *StoreBookmark `protobuf:"bytes,14,opt,name=storeBookmark,proto3,oneof"`
}

type GatewayRequest_LoadBookmark struct {
	// load and execute a bookmark into the current state
	LoadBookmark *LoadBookmark `protobuf:"bytes,15,opt,name=loadBookmark,proto3,oneof"`
}

func (*GatewayRequest_Query) isGatewayRequest_RequestType() {}

func (*GatewayRequest_CancelQuery) isGatewayRequest_RequestType() {}

func (*GatewayRequest_UndoQuery) isGatewayRequest_RequestType() {}

func (*GatewayRequest_Expand) isGatewayRequest_RequestType() {}

func (*GatewayRequest_UndoExpand) isGatewayRequest_RequestType() {}

func (*GatewayRequest_StoreSnapshot) isGatewayRequest_RequestType() {}

func (*GatewayRequest_LoadSnapshot) isGatewayRequest_RequestType() {}

func (*GatewayRequest_StoreBookmark) isGatewayRequest_RequestType() {}

func (*GatewayRequest_LoadBookmark) isGatewayRequest_RequestType() {}

// The gateway will always respond with this type of message,
// however the purpose of it is purely as a wrapper to the many different types
// of messages that the gateway can send
type GatewayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ResponseType:
	//
	//	*GatewayResponse_NewItem
	//	*GatewayResponse_NewEdge
	//	*GatewayResponse_Status
	//	*GatewayResponse_Error
	//	*GatewayResponse_QueryError
	//	*GatewayResponse_DeleteItem
	//	*GatewayResponse_DeleteEdge
	//	*GatewayResponse_UpdateItem
	//	*GatewayResponse_SnapshotStoreResult
	//	*GatewayResponse_SnapshotLoadResult
	//	*GatewayResponse_BookmarkStoreResult
	//	*GatewayResponse_BookmarkLoadResult
	//	*GatewayResponse_QueryStatus
	ResponseType isGatewayResponse_ResponseType `protobuf_oneof:"response_type"`
}

func (x *GatewayResponse) Reset() {
	*x = GatewayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayResponse) ProtoMessage() {}

func (x *GatewayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayResponse.ProtoReflect.Descriptor instead.
func (*GatewayResponse) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{1}
}

func (m *GatewayResponse) GetResponseType() isGatewayResponse_ResponseType {
	if m != nil {
		return m.ResponseType
	}
	return nil
}

func (x *GatewayResponse) GetNewItem() *Item {
	if x, ok := x.GetResponseType().(*GatewayResponse_NewItem); ok {
		return x.NewItem
	}
	return nil
}

func (x *GatewayResponse) GetNewEdge() *Edge {
	if x, ok := x.GetResponseType().(*GatewayResponse_NewEdge); ok {
		return x.NewEdge
	}
	return nil
}

func (x *GatewayResponse) GetStatus() *GatewayRequestStatus {
	if x, ok := x.GetResponseType().(*GatewayResponse_Status); ok {
		return x.Status
	}
	return nil
}

func (x *GatewayResponse) GetError() string {
	if x, ok := x.GetResponseType().(*GatewayResponse_Error); ok {
		return x.Error
	}
	return ""
}

func (x *GatewayResponse) GetQueryError() *QueryError {
	if x, ok := x.GetResponseType().(*GatewayResponse_QueryError); ok {
		return x.QueryError
	}
	return nil
}

func (x *GatewayResponse) GetDeleteItem() *Reference {
	if x, ok := x.GetResponseType().(*GatewayResponse_DeleteItem); ok {
		return x.DeleteItem
	}
	return nil
}

func (x *GatewayResponse) GetDeleteEdge() *Edge {
	if x, ok := x.GetResponseType().(*GatewayResponse_DeleteEdge); ok {
		return x.DeleteEdge
	}
	return nil
}

func (x *GatewayResponse) GetUpdateItem() *Item {
	if x, ok := x.GetResponseType().(*GatewayResponse_UpdateItem); ok {
		return x.UpdateItem
	}
	return nil
}

func (x *GatewayResponse) GetSnapshotStoreResult() *SnapshotStoreResult {
	if x, ok := x.GetResponseType().(*GatewayResponse_SnapshotStoreResult); ok {
		return x.SnapshotStoreResult
	}
	return nil
}

func (x *GatewayResponse) GetSnapshotLoadResult() *SnapshotLoadResult {
	if x, ok := x.GetResponseType().(*GatewayResponse_SnapshotLoadResult); ok {
		return x.SnapshotLoadResult
	}
	return nil
}

func (x *GatewayResponse) GetBookmarkStoreResult() *BookmarkStoreResult {
	if x, ok := x.GetResponseType().(*GatewayResponse_BookmarkStoreResult); ok {
		return x.BookmarkStoreResult
	}
	return nil
}

func (x *GatewayResponse) GetBookmarkLoadResult() *BookmarkLoadResult {
	if x, ok := x.GetResponseType().(*GatewayResponse_BookmarkLoadResult); ok {
		return x.BookmarkLoadResult
	}
	return nil
}

func (x *GatewayResponse) GetQueryStatus() *QueryStatus {
	if x, ok := x.GetResponseType().(*GatewayResponse_QueryStatus); ok {
		return x.QueryStatus
	}
	return nil
}

type isGatewayResponse_ResponseType interface {
	isGatewayResponse_ResponseType()
}

type GatewayResponse_NewItem struct {
	NewItem *Item `protobuf:"bytes,2,opt,name=newItem,proto3,oneof"` // A new item that has been discovered
}

type GatewayResponse_NewEdge struct {
	NewEdge *Edge `protobuf:"bytes,3,opt,name=newEdge,proto3,oneof"` // A new edge between two items
}

type GatewayResponse_Status struct {
	Status *GatewayRequestStatus `protobuf:"bytes,4,opt,name=status,proto3,oneof"` // Status of the overall request
}

type GatewayResponse_Error struct {
	Error string `protobuf:"bytes,5,opt,name=error,proto3,oneof"` // An error that means the request couldn't be executed
}

type GatewayResponse_QueryError struct {
	QueryError *QueryError `protobuf:"bytes,6,opt,name=queryError,proto3,oneof"` // A new error that was encountered as part of a query
}

type GatewayResponse_DeleteItem struct {
	DeleteItem *Reference `protobuf:"bytes,7,opt,name=deleteItem,proto3,oneof"` // An item that should be deleted from local state
}

type GatewayResponse_DeleteEdge struct {
	DeleteEdge *Edge `protobuf:"bytes,8,opt,name=deleteEdge,proto3,oneof"` // An edge that should be deleted form local state
}

type GatewayResponse_UpdateItem struct {
	UpdateItem *Item `protobuf:"bytes,9,opt,name=updateItem,proto3,oneof"` // An item that has already been sent, but contains new data, it should be updated to reflect this version
}

type GatewayResponse_SnapshotStoreResult struct {
	SnapshotStoreResult *SnapshotStoreResult `protobuf:"bytes,11,opt,name=snapshotStoreResult,proto3,oneof"`
}

type GatewayResponse_SnapshotLoadResult struct {
	SnapshotLoadResult *SnapshotLoadResult `protobuf:"bytes,12,opt,name=snapshotLoadResult,proto3,oneof"`
}

type GatewayResponse_BookmarkStoreResult struct {
	BookmarkStoreResult *BookmarkStoreResult `protobuf:"bytes,15,opt,name=bookmarkStoreResult,proto3,oneof"`
}

type GatewayResponse_BookmarkLoadResult struct {
	BookmarkLoadResult *BookmarkLoadResult `protobuf:"bytes,16,opt,name=bookmarkLoadResult,proto3,oneof"`
}

type GatewayResponse_QueryStatus struct {
	QueryStatus *QueryStatus `protobuf:"bytes,17,opt,name=queryStatus,proto3,oneof"` // Status of requested queries
}

func (*GatewayResponse_NewItem) isGatewayResponse_ResponseType() {}

func (*GatewayResponse_NewEdge) isGatewayResponse_ResponseType() {}

func (*GatewayResponse_Status) isGatewayResponse_ResponseType() {}

func (*GatewayResponse_Error) isGatewayResponse_ResponseType() {}

func (*GatewayResponse_QueryError) isGatewayResponse_ResponseType() {}

func (*GatewayResponse_DeleteItem) isGatewayResponse_ResponseType() {}

func (*GatewayResponse_DeleteEdge) isGatewayResponse_ResponseType() {}

func (*GatewayResponse_UpdateItem) isGatewayResponse_ResponseType() {}

func (*GatewayResponse_SnapshotStoreResult) isGatewayResponse_ResponseType() {}

func (*GatewayResponse_SnapshotLoadResult) isGatewayResponse_ResponseType() {}

func (*GatewayResponse_BookmarkStoreResult) isGatewayResponse_ResponseType() {}

func (*GatewayResponse_BookmarkLoadResult) isGatewayResponse_ResponseType() {}

func (*GatewayResponse_QueryStatus) isGatewayResponse_ResponseType() {}

// Contains the status of the gateway request.
type GatewayRequestStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponderStates map[string]ResponderState     `protobuf:"bytes,1,rep,name=responderStates,proto3" json:"responderStates,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=ResponderState"`
	Summary         *GatewayRequestStatus_Summary `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
	// Whether all items have finished being processed by the gateway. It is
	// possible for all responders to be complete, but the gateway is still
	// working. A request should only be considered complete when all working ==
	// 0 and postProcessingComplete == true
	PostProcessingComplete bool `protobuf:"varint,4,opt,name=postProcessingComplete,proto3" json:"postProcessingComplete,omitempty"`
}

func (x *GatewayRequestStatus) Reset() {
	*x = GatewayRequestStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRequestStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRequestStatus) ProtoMessage() {}

func (x *GatewayRequestStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRequestStatus.ProtoReflect.Descriptor instead.
func (*GatewayRequestStatus) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{2}
}

func (x *GatewayRequestStatus) GetResponderStates() map[string]ResponderState {
	if x != nil {
		return x.ResponderStates
	}
	return nil
}

func (x *GatewayRequestStatus) GetSummary() *GatewayRequestStatus_Summary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *GatewayRequestStatus) GetPostProcessingComplete() bool {
	if x != nil {
		return x.PostProcessingComplete
	}
	return false
}

// Ask the gateway to store the current state as bookmark with the specified details.
// Returns a BookmarkStored message when the bookmark is stored
type StoreBookmark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user supplied name of this bookmark
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// user supplied description of this bookmark
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// a correlation ID to match up requests and responses. set this to a value unique per connection
	MsgID []byte `protobuf:"bytes,3,opt,name=msgID,proto3" json:"msgID,omitempty"`
	// whether this bookmark should be stored as a system bookmark. System
	// bookmarks are hidden and can only be returned via the UUID, they don't
	// show up in lists
	IsSystem bool `protobuf:"varint,4,opt,name=isSystem,proto3" json:"isSystem,omitempty"`
}

func (x *StoreBookmark) Reset() {
	*x = StoreBookmark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreBookmark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreBookmark) ProtoMessage() {}

func (x *StoreBookmark) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreBookmark.ProtoReflect.Descriptor instead.
func (*StoreBookmark) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{3}
}

func (x *StoreBookmark) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StoreBookmark) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *StoreBookmark) GetMsgID() []byte {
	if x != nil {
		return x.MsgID
	}
	return nil
}

func (x *StoreBookmark) GetIsSystem() bool {
	if x != nil {
		return x.IsSystem
	}
	return false
}

// After a bookmark is successfully stored, this reply with the new bookmark's details is sent.
type BookmarkStoreResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	// a correlation ID to match up requests and responses. this field returns the contents of the request's msgID
	MsgID []byte `protobuf:"bytes,4,opt,name=msgID,proto3" json:"msgID,omitempty"`
	// UUID of the newly created bookmark
	BookmarkID []byte `protobuf:"bytes,5,opt,name=bookmarkID,proto3" json:"bookmarkID,omitempty"`
}

func (x *BookmarkStoreResult) Reset() {
	*x = BookmarkStoreResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookmarkStoreResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookmarkStoreResult) ProtoMessage() {}

func (x *BookmarkStoreResult) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookmarkStoreResult.ProtoReflect.Descriptor instead.
func (*BookmarkStoreResult) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{4}
}

func (x *BookmarkStoreResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BookmarkStoreResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *BookmarkStoreResult) GetMsgID() []byte {
	if x != nil {
		return x.MsgID
	}
	return nil
}

func (x *BookmarkStoreResult) GetBookmarkID() []byte {
	if x != nil {
		return x.BookmarkID
	}
	return nil
}

// Ask the gateway to load the specified bookmark into the current state.
// Results are streamed to the client in the same way query results are.
type LoadBookmark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique id of the bookmark to load
	UUID []byte `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	// a correlation ID to match up requests and responses. set this to a value unique per connection
	MsgID []byte `protobuf:"bytes,2,opt,name=msgID,proto3" json:"msgID,omitempty"`
	// set to true to force fetching fresh data
	IgnoreCache bool `protobuf:"varint,3,opt,name=ignoreCache,proto3" json:"ignoreCache,omitempty"`
	// The time at which the gateway should stop processing the queries spawned by this request
	Deadline *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=deadline,proto3" json:"deadline,omitempty"`
}

func (x *LoadBookmark) Reset() {
	*x = LoadBookmark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBookmark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBookmark) ProtoMessage() {}

func (x *LoadBookmark) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBookmark.ProtoReflect.Descriptor instead.
func (*LoadBookmark) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{5}
}

func (x *LoadBookmark) GetUUID() []byte {
	if x != nil {
		return x.UUID
	}
	return nil
}

func (x *LoadBookmark) GetMsgID() []byte {
	if x != nil {
		return x.MsgID
	}
	return nil
}

func (x *LoadBookmark) GetIgnoreCache() bool {
	if x != nil {
		return x.IgnoreCache
	}
	return false
}

func (x *LoadBookmark) GetDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.Deadline
	}
	return nil
}

type BookmarkLoadResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	// UUIDs of all queries that have been started as a result of loading this bookmark
	StartedQueryUUIDs [][]byte `protobuf:"bytes,3,rep,name=startedQueryUUIDs,proto3" json:"startedQueryUUIDs,omitempty"`
	// a correlation ID to match up requests and responses. this field returns the contents of the request's msgID
	MsgID []byte `protobuf:"bytes,4,opt,name=msgID,proto3" json:"msgID,omitempty"`
}

func (x *BookmarkLoadResult) Reset() {
	*x = BookmarkLoadResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookmarkLoadResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookmarkLoadResult) ProtoMessage() {}

func (x *BookmarkLoadResult) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookmarkLoadResult.ProtoReflect.Descriptor instead.
func (*BookmarkLoadResult) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{6}
}

func (x *BookmarkLoadResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BookmarkLoadResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *BookmarkLoadResult) GetStartedQueryUUIDs() [][]byte {
	if x != nil {
		return x.StartedQueryUUIDs
	}
	return nil
}

func (x *BookmarkLoadResult) GetMsgID() []byte {
	if x != nil {
		return x.MsgID
	}
	return nil
}

// Ask the gateway to store the current state as snapshot with the specified details.
// Returns a SnapshotStored message when the snapshot is stored
type StoreSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user supplied name of this snapshot
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// user supplied description of this snapshot
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// a correlation ID to match up requests and responses. set this to a value unique per connection
	MsgID []byte `protobuf:"bytes,3,opt,name=msgID,proto3" json:"msgID,omitempty"`
}

func (x *StoreSnapshot) Reset() {
	*x = StoreSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreSnapshot) ProtoMessage() {}

func (x *StoreSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreSnapshot.ProtoReflect.Descriptor instead.
func (*StoreSnapshot) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{7}
}

func (x *StoreSnapshot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StoreSnapshot) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *StoreSnapshot) GetMsgID() []byte {
	if x != nil {
		return x.MsgID
	}
	return nil
}

// After a snapshot is successfully stored, this reply with the new snapshot's details is sent.
type SnapshotStoreResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	// a correlation ID to match up requests and responses. this field returns the contents of the request's msgID
	MsgID      []byte `protobuf:"bytes,4,opt,name=msgID,proto3" json:"msgID,omitempty"`
	SnapshotID []byte `protobuf:"bytes,5,opt,name=snapshotID,proto3" json:"snapshotID,omitempty"` // The UUID of the newly stored snapshot
}

func (x *SnapshotStoreResult) Reset() {
	*x = SnapshotStoreResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotStoreResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotStoreResult) ProtoMessage() {}

func (x *SnapshotStoreResult) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotStoreResult.ProtoReflect.Descriptor instead.
func (*SnapshotStoreResult) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{8}
}

func (x *SnapshotStoreResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SnapshotStoreResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *SnapshotStoreResult) GetMsgID() []byte {
	if x != nil {
		return x.MsgID
	}
	return nil
}

func (x *SnapshotStoreResult) GetSnapshotID() []byte {
	if x != nil {
		return x.SnapshotID
	}
	return nil
}

// Ask the gateway to load the specified snapshot into the current state.
// Results are streamed to the client in the same way query results are.
type LoadSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique id of the snapshot to load
	UUID []byte `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	// a correlation ID to match up requests and responses. set this to a value unique per connection
	MsgID []byte `protobuf:"bytes,2,opt,name=msgID,proto3" json:"msgID,omitempty"`
}

func (x *LoadSnapshot) Reset() {
	*x = LoadSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadSnapshot) ProtoMessage() {}

func (x *LoadSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadSnapshot.ProtoReflect.Descriptor instead.
func (*LoadSnapshot) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{9}
}

func (x *LoadSnapshot) GetUUID() []byte {
	if x != nil {
		return x.UUID
	}
	return nil
}

func (x *LoadSnapshot) GetMsgID() []byte {
	if x != nil {
		return x.MsgID
	}
	return nil
}

type SnapshotLoadResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	// a correlation ID to match up requests and responses. this field returns the contents of the request's msgID
	MsgID []byte `protobuf:"bytes,4,opt,name=msgID,proto3" json:"msgID,omitempty"`
}

func (x *SnapshotLoadResult) Reset() {
	*x = SnapshotLoadResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotLoadResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotLoadResult) ProtoMessage() {}

func (x *SnapshotLoadResult) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotLoadResult.ProtoReflect.Descriptor instead.
func (*SnapshotLoadResult) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{10}
}

func (x *SnapshotLoadResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SnapshotLoadResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *SnapshotLoadResult) GetMsgID() []byte {
	if x != nil {
		return x.MsgID
	}
	return nil
}

type GatewayRequestStatus_Summary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Working    int32 `protobuf:"varint,1,opt,name=working,proto3" json:"working,omitempty"`
	Stalled    int32 `protobuf:"varint,2,opt,name=stalled,proto3" json:"stalled,omitempty"`
	Complete   int32 `protobuf:"varint,3,opt,name=complete,proto3" json:"complete,omitempty"`
	Error      int32 `protobuf:"varint,4,opt,name=error,proto3" json:"error,omitempty"`
	Cancelled  int32 `protobuf:"varint,5,opt,name=cancelled,proto3" json:"cancelled,omitempty"`
	Responders int32 `protobuf:"varint,6,opt,name=responders,proto3" json:"responders,omitempty"`
}

func (x *GatewayRequestStatus_Summary) Reset() {
	*x = GatewayRequestStatus_Summary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayRequestStatus_Summary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayRequestStatus_Summary) ProtoMessage() {}

func (x *GatewayRequestStatus_Summary) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayRequestStatus_Summary.ProtoReflect.Descriptor instead.
func (*GatewayRequestStatus_Summary) Descriptor() ([]byte, []int) {
	return file_gateway_proto_rawDescGZIP(), []int{2, 1}
}

func (x *GatewayRequestStatus_Summary) GetWorking() int32 {
	if x != nil {
		return x.Working
	}
	return 0
}

func (x *GatewayRequestStatus_Summary) GetStalled() int32 {
	if x != nil {
		return x.Stalled
	}
	return 0
}

func (x *GatewayRequestStatus_Summary) GetComplete() int32 {
	if x != nil {
		return x.Complete
	}
	return 0
}

func (x *GatewayRequestStatus_Summary) GetError() int32 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *GatewayRequestStatus_Summary) GetCancelled() int32 {
	if x != nil {
		return x.Cancelled
	}
	return 0
}

func (x *GatewayRequestStatus_Summary) GetResponders() int32 {
	if x != nil {
		return x.Responders
	}
	return 0
}

var File_gateway_proto protoreflect.FileDescriptor

var file_gateway_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x1a, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xce, 0x04, 0x0a, 0x0e, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x0b, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x09,
	0x75, 0x6e, 0x64, 0x6f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x09, 0x75,
	0x6e, 0x64, 0x6f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x61,
	0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e,
	0x64, 0x48, 0x00, 0x52, 0x06, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x12, 0x2d, 0x0a, 0x0a, 0x75,
	0x6e, 0x64, 0x6f, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x55, 0x6e, 0x64, 0x6f, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0a,
	0x75, 0x6e, 0x64, 0x6f, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x3b, 0x0a, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x42,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x4c, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x11, 0x6d, 0x69,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88,
	0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0xdc, 0x05, 0x0a, 0x0f, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x07,
	0x6e, 0x65, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x21, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x45, 0x64, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x05, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x45, 0x64,
	0x67, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x27, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x64, 0x67, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x64, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x50, 0x0a, 0x13, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52,
	0x13, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x4d, 0x0a, 0x12, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52,
	0x12, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x13, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00,
	0x52, 0x13, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4d, 0x0a, 0x12, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x42, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00,
	0x52, 0x12, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xf2, 0x03, 0x0a, 0x14, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x5c, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3f,
	0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x36, 0x0a, 0x16, 0x70, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x70, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x53, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xad, 0x01, 0x0a,
	0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x22, 0x77, 0x0a, 0x0d,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x8f, 0x01, 0x0a, 0x13, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x73, 0x67, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x49,
	0x44, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x92, 0x01, 0x0a, 0x0c, 0x4c, 0x6f, 0x61, 0x64,
	0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x96, 0x01, 0x0a,
	0x12, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x55, 0x55, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x11, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x55, 0x49, 0x44, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x44, 0x22, 0x5b, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x44, 0x22, 0x8f, 0x01, 0x0a, 0x13, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x44, 0x4a, 0x04,
	0x08, 0x03, 0x10, 0x04, 0x22, 0x38, 0x0a, 0x0c, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x22, 0x68,
	0x0a, 0x12, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x44, 0x42, 0x24, 0x5a, 0x22, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x64, 0x74,
	0x65, 0x63, 0x68, 0x2f, 0x73, 0x64, 0x70, 0x2d, 0x67, 0x6f, 0x3b, 0x73, 0x64, 0x70, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gateway_proto_rawDescOnce sync.Once
	file_gateway_proto_rawDescData = file_gateway_proto_rawDesc
)

func file_gateway_proto_rawDescGZIP() []byte {
	file_gateway_proto_rawDescOnce.Do(func() {
		file_gateway_proto_rawDescData = protoimpl.X.CompressGZIP(file_gateway_proto_rawDescData)
	})
	return file_gateway_proto_rawDescData
}

var file_gateway_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_gateway_proto_goTypes = []interface{}{
	(*GatewayRequest)(nil),               // 0: gateway.GatewayRequest
	(*GatewayResponse)(nil),              // 1: gateway.GatewayResponse
	(*GatewayRequestStatus)(nil),         // 2: gateway.GatewayRequestStatus
	(*StoreBookmark)(nil),                // 3: gateway.StoreBookmark
	(*BookmarkStoreResult)(nil),          // 4: gateway.BookmarkStoreResult
	(*LoadBookmark)(nil),                 // 5: gateway.LoadBookmark
	(*BookmarkLoadResult)(nil),           // 6: gateway.BookmarkLoadResult
	(*StoreSnapshot)(nil),                // 7: gateway.StoreSnapshot
	(*SnapshotStoreResult)(nil),          // 8: gateway.SnapshotStoreResult
	(*LoadSnapshot)(nil),                 // 9: gateway.LoadSnapshot
	(*SnapshotLoadResult)(nil),           // 10: gateway.SnapshotLoadResult
	nil,                                  // 11: gateway.GatewayRequestStatus.ResponderStatesEntry
	(*GatewayRequestStatus_Summary)(nil), // 12: gateway.GatewayRequestStatus.Summary
	(*Query)(nil),                        // 13: Query
	(*CancelQuery)(nil),                  // 14: CancelQuery
	(*UndoQuery)(nil),                    // 15: UndoQuery
	(*Expand)(nil),                       // 16: Expand
	(*UndoExpand)(nil),                   // 17: UndoExpand
	(*durationpb.Duration)(nil),          // 18: google.protobuf.Duration
	(*Item)(nil),                         // 19: Item
	(*Edge)(nil),                         // 20: Edge
	(*QueryError)(nil),                   // 21: QueryError
	(*Reference)(nil),                    // 22: Reference
	(*QueryStatus)(nil),                  // 23: QueryStatus
	(*timestamppb.Timestamp)(nil),        // 24: google.protobuf.Timestamp
	(ResponderState)(0),                  // 25: ResponderState
}
var file_gateway_proto_depIdxs = []int32{
	13, // 0: gateway.GatewayRequest.query:type_name -> Query
	14, // 1: gateway.GatewayRequest.cancelQuery:type_name -> CancelQuery
	15, // 2: gateway.GatewayRequest.undoQuery:type_name -> UndoQuery
	16, // 3: gateway.GatewayRequest.expand:type_name -> Expand
	17, // 4: gateway.GatewayRequest.undoExpand:type_name -> UndoExpand
	7,  // 5: gateway.GatewayRequest.storeSnapshot:type_name -> gateway.StoreSnapshot
	9,  // 6: gateway.GatewayRequest.loadSnapshot:type_name -> gateway.LoadSnapshot
	3,  // 7: gateway.GatewayRequest.storeBookmark:type_name -> gateway.StoreBookmark
	5,  // 8: gateway.GatewayRequest.loadBookmark:type_name -> gateway.LoadBookmark
	18, // 9: gateway.GatewayRequest.minStatusInterval:type_name -> google.protobuf.Duration
	19, // 10: gateway.GatewayResponse.newItem:type_name -> Item
	20, // 11: gateway.GatewayResponse.newEdge:type_name -> Edge
	2,  // 12: gateway.GatewayResponse.status:type_name -> gateway.GatewayRequestStatus
	21, // 13: gateway.GatewayResponse.queryError:type_name -> QueryError
	22, // 14: gateway.GatewayResponse.deleteItem:type_name -> Reference
	20, // 15: gateway.GatewayResponse.deleteEdge:type_name -> Edge
	19, // 16: gateway.GatewayResponse.updateItem:type_name -> Item
	8,  // 17: gateway.GatewayResponse.snapshotStoreResult:type_name -> gateway.SnapshotStoreResult
	10, // 18: gateway.GatewayResponse.snapshotLoadResult:type_name -> gateway.SnapshotLoadResult
	4,  // 19: gateway.GatewayResponse.bookmarkStoreResult:type_name -> gateway.BookmarkStoreResult
	6,  // 20: gateway.GatewayResponse.bookmarkLoadResult:type_name -> gateway.BookmarkLoadResult
	23, // 21: gateway.GatewayResponse.queryStatus:type_name -> QueryStatus
	11, // 22: gateway.GatewayRequestStatus.responderStates:type_name -> gateway.GatewayRequestStatus.ResponderStatesEntry
	12, // 23: gateway.GatewayRequestStatus.summary:type_name -> gateway.GatewayRequestStatus.Summary
	24, // 24: gateway.LoadBookmark.deadline:type_name -> google.protobuf.Timestamp
	25, // 25: gateway.GatewayRequestStatus.ResponderStatesEntry.value:type_name -> ResponderState
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_gateway_proto_init() }
func file_gateway_proto_init() {
	if File_gateway_proto != nil {
		return
	}
	file_items_proto_init()
	file_responses_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_gateway_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRequestStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreBookmark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookmarkStoreResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBookmark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookmarkLoadResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotStoreResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotLoadResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayRequestStatus_Summary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_gateway_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*GatewayRequest_Query)(nil),
		(*GatewayRequest_CancelQuery)(nil),
		(*GatewayRequest_UndoQuery)(nil),
		(*GatewayRequest_Expand)(nil),
		(*GatewayRequest_UndoExpand)(nil),
		(*GatewayRequest_StoreSnapshot)(nil),
		(*GatewayRequest_LoadSnapshot)(nil),
		(*GatewayRequest_StoreBookmark)(nil),
		(*GatewayRequest_LoadBookmark)(nil),
	}
	file_gateway_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*GatewayResponse_NewItem)(nil),
		(*GatewayResponse_NewEdge)(nil),
		(*GatewayResponse_Status)(nil),
		(*GatewayResponse_Error)(nil),
		(*GatewayResponse_QueryError)(nil),
		(*GatewayResponse_DeleteItem)(nil),
		(*GatewayResponse_DeleteEdge)(nil),
		(*GatewayResponse_UpdateItem)(nil),
		(*GatewayResponse_SnapshotStoreResult)(nil),
		(*GatewayResponse_SnapshotLoadResult)(nil),
		(*GatewayResponse_BookmarkStoreResult)(nil),
		(*GatewayResponse_BookmarkLoadResult)(nil),
		(*GatewayResponse_QueryStatus)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gateway_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gateway_proto_goTypes,
		DependencyIndexes: file_gateway_proto_depIdxs,
		MessageInfos:      file_gateway_proto_msgTypes,
	}.Build()
	File_gateway_proto = out.File
	file_gateway_proto_rawDesc = nil
	file_gateway_proto_goTypes = nil
	file_gateway_proto_depIdxs = nil
}
