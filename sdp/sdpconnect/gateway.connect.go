// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gateway.proto

package sdpconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	sdp "github.com/overmindtech/sdp-go/sdp"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// GatewayServiceName is the fully-qualified name of the GatewayService service.
	GatewayServiceName = "gateway.GatewayService"
)

// GatewayServiceClient is a client for the gateway.GatewayService service.
type GatewayServiceClient interface {
	ListBookmarks(context.Context, *connect_go.Request[sdp.ListBookmarksRequest]) (*connect_go.Response[sdp.ListBookmarkResponse], error)
	UpdateBookmark(context.Context, *connect_go.Request[sdp.UpdateBookmarkRequest]) (*connect_go.Response[sdp.UpdateBookmarkResponse], error)
	DeleteBookmark(context.Context, *connect_go.Request[sdp.DeleteBookmarkRequest]) (*connect_go.Response[sdp.DeleteBookmarkResponse], error)
}

// NewGatewayServiceClient constructs a client for the gateway.GatewayService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGatewayServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) GatewayServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &gatewayServiceClient{
		listBookmarks: connect_go.NewClient[sdp.ListBookmarksRequest, sdp.ListBookmarkResponse](
			httpClient,
			baseURL+"/gateway.GatewayService/ListBookmarks",
			opts...,
		),
		updateBookmark: connect_go.NewClient[sdp.UpdateBookmarkRequest, sdp.UpdateBookmarkResponse](
			httpClient,
			baseURL+"/gateway.GatewayService/UpdateBookmark",
			opts...,
		),
		deleteBookmark: connect_go.NewClient[sdp.DeleteBookmarkRequest, sdp.DeleteBookmarkResponse](
			httpClient,
			baseURL+"/gateway.GatewayService/DeleteBookmark",
			opts...,
		),
	}
}

// gatewayServiceClient implements GatewayServiceClient.
type gatewayServiceClient struct {
	listBookmarks  *connect_go.Client[sdp.ListBookmarksRequest, sdp.ListBookmarkResponse]
	updateBookmark *connect_go.Client[sdp.UpdateBookmarkRequest, sdp.UpdateBookmarkResponse]
	deleteBookmark *connect_go.Client[sdp.DeleteBookmarkRequest, sdp.DeleteBookmarkResponse]
}

// ListBookmarks calls gateway.GatewayService.ListBookmarks.
func (c *gatewayServiceClient) ListBookmarks(ctx context.Context, req *connect_go.Request[sdp.ListBookmarksRequest]) (*connect_go.Response[sdp.ListBookmarkResponse], error) {
	return c.listBookmarks.CallUnary(ctx, req)
}

// UpdateBookmark calls gateway.GatewayService.UpdateBookmark.
func (c *gatewayServiceClient) UpdateBookmark(ctx context.Context, req *connect_go.Request[sdp.UpdateBookmarkRequest]) (*connect_go.Response[sdp.UpdateBookmarkResponse], error) {
	return c.updateBookmark.CallUnary(ctx, req)
}

// DeleteBookmark calls gateway.GatewayService.DeleteBookmark.
func (c *gatewayServiceClient) DeleteBookmark(ctx context.Context, req *connect_go.Request[sdp.DeleteBookmarkRequest]) (*connect_go.Response[sdp.DeleteBookmarkResponse], error) {
	return c.deleteBookmark.CallUnary(ctx, req)
}

// GatewayServiceHandler is an implementation of the gateway.GatewayService service.
type GatewayServiceHandler interface {
	ListBookmarks(context.Context, *connect_go.Request[sdp.ListBookmarksRequest]) (*connect_go.Response[sdp.ListBookmarkResponse], error)
	UpdateBookmark(context.Context, *connect_go.Request[sdp.UpdateBookmarkRequest]) (*connect_go.Response[sdp.UpdateBookmarkResponse], error)
	DeleteBookmark(context.Context, *connect_go.Request[sdp.DeleteBookmarkRequest]) (*connect_go.Response[sdp.DeleteBookmarkResponse], error)
}

// NewGatewayServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGatewayServiceHandler(svc GatewayServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/gateway.GatewayService/ListBookmarks", connect_go.NewUnaryHandler(
		"/gateway.GatewayService/ListBookmarks",
		svc.ListBookmarks,
		opts...,
	))
	mux.Handle("/gateway.GatewayService/UpdateBookmark", connect_go.NewUnaryHandler(
		"/gateway.GatewayService/UpdateBookmark",
		svc.UpdateBookmark,
		opts...,
	))
	mux.Handle("/gateway.GatewayService/DeleteBookmark", connect_go.NewUnaryHandler(
		"/gateway.GatewayService/DeleteBookmark",
		svc.DeleteBookmark,
		opts...,
	))
	return "/gateway.GatewayService/", mux
}

// UnimplementedGatewayServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGatewayServiceHandler struct{}

func (UnimplementedGatewayServiceHandler) ListBookmarks(context.Context, *connect_go.Request[sdp.ListBookmarksRequest]) (*connect_go.Response[sdp.ListBookmarkResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gateway.GatewayService.ListBookmarks is not implemented"))
}

func (UnimplementedGatewayServiceHandler) UpdateBookmark(context.Context, *connect_go.Request[sdp.UpdateBookmarkRequest]) (*connect_go.Response[sdp.UpdateBookmarkResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gateway.GatewayService.UpdateBookmark is not implemented"))
}

func (UnimplementedGatewayServiceHandler) DeleteBookmark(context.Context, *connect_go.Request[sdp.DeleteBookmarkRequest]) (*connect_go.Response[sdp.DeleteBookmarkResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("gateway.GatewayService.DeleteBookmark is not implemented"))
}
