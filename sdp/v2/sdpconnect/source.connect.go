// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: sdp/v2/source.proto

package sdpconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "github.com/overmindtech/sdp-go/sdp/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SourceServiceName is the fully-qualified name of the SourceService service.
	SourceServiceName = "sdp.v2.SourceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SourceServiceQueryProcedure is the fully-qualified name of the SourceService's Query RPC.
	SourceServiceQueryProcedure = "/sdp.v2.SourceService/Query"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	sourceServiceServiceDescriptor     = v2.File_sdp_v2_source_proto.Services().ByName("SourceService")
	sourceServiceQueryMethodDescriptor = sourceServiceServiceDescriptor.Methods().ByName("Query")
)

// SourceServiceClient is a client for the sdp.v2.SourceService service.
type SourceServiceClient interface {
	// execute a query against the source. The source will return a stream of Items, Edges and Errors.
	Query(context.Context, *connect.Request[v2.QueryRequest]) (*connect.ServerStreamForClient[v2.QueryResponse], error)
}

// NewSourceServiceClient constructs a client for the sdp.v2.SourceService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSourceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SourceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &sourceServiceClient{
		query: connect.NewClient[v2.QueryRequest, v2.QueryResponse](
			httpClient,
			baseURL+SourceServiceQueryProcedure,
			connect.WithSchema(sourceServiceQueryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// sourceServiceClient implements SourceServiceClient.
type sourceServiceClient struct {
	query *connect.Client[v2.QueryRequest, v2.QueryResponse]
}

// Query calls sdp.v2.SourceService.Query.
func (c *sourceServiceClient) Query(ctx context.Context, req *connect.Request[v2.QueryRequest]) (*connect.ServerStreamForClient[v2.QueryResponse], error) {
	return c.query.CallServerStream(ctx, req)
}

// SourceServiceHandler is an implementation of the sdp.v2.SourceService service.
type SourceServiceHandler interface {
	// execute a query against the source. The source will return a stream of Items, Edges and Errors.
	Query(context.Context, *connect.Request[v2.QueryRequest], *connect.ServerStream[v2.QueryResponse]) error
}

// NewSourceServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSourceServiceHandler(svc SourceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sourceServiceQueryHandler := connect.NewServerStreamHandler(
		SourceServiceQueryProcedure,
		svc.Query,
		connect.WithSchema(sourceServiceQueryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/sdp.v2.SourceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SourceServiceQueryProcedure:
			sourceServiceQueryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSourceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSourceServiceHandler struct{}

func (UnimplementedSourceServiceHandler) Query(context.Context, *connect.Request[v2.QueryRequest], *connect.ServerStream[v2.QueryResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("sdp.v2.SourceService.Query is not implemented"))
}
