// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: bookmarks.proto

package sdpconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	sdp_go "github.com/overmindtech/sdp-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// BookmarksServiceName is the fully-qualified name of the BookmarksService service.
	BookmarksServiceName = "BookmarksService"
)

// BookmarksServiceClient is a client for the BookmarksService service.
type BookmarksServiceClient interface {
	ListBookmarks(context.Context, *connect_go.Request[sdp_go.ListBookmarksRequest]) (*connect_go.Response[sdp_go.ListBookmarkResponse], error)
	CreateBookmark(context.Context, *connect_go.Request[sdp_go.CreateBookmarkRequest]) (*connect_go.Response[sdp_go.CreateBookmarkResponse], error)
	GetBookmark(context.Context, *connect_go.Request[sdp_go.GetBookmarkRequest]) (*connect_go.Response[sdp_go.GetBookmarkResponse], error)
	UpdateBookmark(context.Context, *connect_go.Request[sdp_go.UpdateBookmarkRequest]) (*connect_go.Response[sdp_go.UpdateBookmarkResponse], error)
	DeleteBookmark(context.Context, *connect_go.Request[sdp_go.DeleteBookmarkRequest]) (*connect_go.Response[sdp_go.DeleteBookmarkResponse], error)
}

// NewBookmarksServiceClient constructs a client for the BookmarksService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBookmarksServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BookmarksServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &bookmarksServiceClient{
		listBookmarks: connect_go.NewClient[sdp_go.ListBookmarksRequest, sdp_go.ListBookmarkResponse](
			httpClient,
			baseURL+"/.BookmarksService/ListBookmarks",
			opts...,
		),
		createBookmark: connect_go.NewClient[sdp_go.CreateBookmarkRequest, sdp_go.CreateBookmarkResponse](
			httpClient,
			baseURL+"/.BookmarksService/CreateBookmark",
			opts...,
		),
		getBookmark: connect_go.NewClient[sdp_go.GetBookmarkRequest, sdp_go.GetBookmarkResponse](
			httpClient,
			baseURL+"/.BookmarksService/GetBookmark",
			opts...,
		),
		updateBookmark: connect_go.NewClient[sdp_go.UpdateBookmarkRequest, sdp_go.UpdateBookmarkResponse](
			httpClient,
			baseURL+"/.BookmarksService/UpdateBookmark",
			opts...,
		),
		deleteBookmark: connect_go.NewClient[sdp_go.DeleteBookmarkRequest, sdp_go.DeleteBookmarkResponse](
			httpClient,
			baseURL+"/.BookmarksService/DeleteBookmark",
			opts...,
		),
	}
}

// bookmarksServiceClient implements BookmarksServiceClient.
type bookmarksServiceClient struct {
	listBookmarks  *connect_go.Client[sdp_go.ListBookmarksRequest, sdp_go.ListBookmarkResponse]
	createBookmark *connect_go.Client[sdp_go.CreateBookmarkRequest, sdp_go.CreateBookmarkResponse]
	getBookmark    *connect_go.Client[sdp_go.GetBookmarkRequest, sdp_go.GetBookmarkResponse]
	updateBookmark *connect_go.Client[sdp_go.UpdateBookmarkRequest, sdp_go.UpdateBookmarkResponse]
	deleteBookmark *connect_go.Client[sdp_go.DeleteBookmarkRequest, sdp_go.DeleteBookmarkResponse]
}

// ListBookmarks calls BookmarksService.ListBookmarks.
func (c *bookmarksServiceClient) ListBookmarks(ctx context.Context, req *connect_go.Request[sdp_go.ListBookmarksRequest]) (*connect_go.Response[sdp_go.ListBookmarkResponse], error) {
	return c.listBookmarks.CallUnary(ctx, req)
}

// CreateBookmark calls BookmarksService.CreateBookmark.
func (c *bookmarksServiceClient) CreateBookmark(ctx context.Context, req *connect_go.Request[sdp_go.CreateBookmarkRequest]) (*connect_go.Response[sdp_go.CreateBookmarkResponse], error) {
	return c.createBookmark.CallUnary(ctx, req)
}

// GetBookmark calls BookmarksService.GetBookmark.
func (c *bookmarksServiceClient) GetBookmark(ctx context.Context, req *connect_go.Request[sdp_go.GetBookmarkRequest]) (*connect_go.Response[sdp_go.GetBookmarkResponse], error) {
	return c.getBookmark.CallUnary(ctx, req)
}

// UpdateBookmark calls BookmarksService.UpdateBookmark.
func (c *bookmarksServiceClient) UpdateBookmark(ctx context.Context, req *connect_go.Request[sdp_go.UpdateBookmarkRequest]) (*connect_go.Response[sdp_go.UpdateBookmarkResponse], error) {
	return c.updateBookmark.CallUnary(ctx, req)
}

// DeleteBookmark calls BookmarksService.DeleteBookmark.
func (c *bookmarksServiceClient) DeleteBookmark(ctx context.Context, req *connect_go.Request[sdp_go.DeleteBookmarkRequest]) (*connect_go.Response[sdp_go.DeleteBookmarkResponse], error) {
	return c.deleteBookmark.CallUnary(ctx, req)
}

// BookmarksServiceHandler is an implementation of the BookmarksService service.
type BookmarksServiceHandler interface {
	ListBookmarks(context.Context, *connect_go.Request[sdp_go.ListBookmarksRequest]) (*connect_go.Response[sdp_go.ListBookmarkResponse], error)
	CreateBookmark(context.Context, *connect_go.Request[sdp_go.CreateBookmarkRequest]) (*connect_go.Response[sdp_go.CreateBookmarkResponse], error)
	GetBookmark(context.Context, *connect_go.Request[sdp_go.GetBookmarkRequest]) (*connect_go.Response[sdp_go.GetBookmarkResponse], error)
	UpdateBookmark(context.Context, *connect_go.Request[sdp_go.UpdateBookmarkRequest]) (*connect_go.Response[sdp_go.UpdateBookmarkResponse], error)
	DeleteBookmark(context.Context, *connect_go.Request[sdp_go.DeleteBookmarkRequest]) (*connect_go.Response[sdp_go.DeleteBookmarkResponse], error)
}

// NewBookmarksServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBookmarksServiceHandler(svc BookmarksServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/.BookmarksService/ListBookmarks", connect_go.NewUnaryHandler(
		"/.BookmarksService/ListBookmarks",
		svc.ListBookmarks,
		opts...,
	))
	mux.Handle("/.BookmarksService/CreateBookmark", connect_go.NewUnaryHandler(
		"/.BookmarksService/CreateBookmark",
		svc.CreateBookmark,
		opts...,
	))
	mux.Handle("/.BookmarksService/GetBookmark", connect_go.NewUnaryHandler(
		"/.BookmarksService/GetBookmark",
		svc.GetBookmark,
		opts...,
	))
	mux.Handle("/.BookmarksService/UpdateBookmark", connect_go.NewUnaryHandler(
		"/.BookmarksService/UpdateBookmark",
		svc.UpdateBookmark,
		opts...,
	))
	mux.Handle("/.BookmarksService/DeleteBookmark", connect_go.NewUnaryHandler(
		"/.BookmarksService/DeleteBookmark",
		svc.DeleteBookmark,
		opts...,
	))
	return "/.BookmarksService/", mux
}

// UnimplementedBookmarksServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBookmarksServiceHandler struct{}

func (UnimplementedBookmarksServiceHandler) ListBookmarks(context.Context, *connect_go.Request[sdp_go.ListBookmarksRequest]) (*connect_go.Response[sdp_go.ListBookmarkResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("BookmarksService.ListBookmarks is not implemented"))
}

func (UnimplementedBookmarksServiceHandler) CreateBookmark(context.Context, *connect_go.Request[sdp_go.CreateBookmarkRequest]) (*connect_go.Response[sdp_go.CreateBookmarkResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("BookmarksService.CreateBookmark is not implemented"))
}

func (UnimplementedBookmarksServiceHandler) GetBookmark(context.Context, *connect_go.Request[sdp_go.GetBookmarkRequest]) (*connect_go.Response[sdp_go.GetBookmarkResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("BookmarksService.GetBookmark is not implemented"))
}

func (UnimplementedBookmarksServiceHandler) UpdateBookmark(context.Context, *connect_go.Request[sdp_go.UpdateBookmarkRequest]) (*connect_go.Response[sdp_go.UpdateBookmarkResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("BookmarksService.UpdateBookmark is not implemented"))
}

func (UnimplementedBookmarksServiceHandler) DeleteBookmark(context.Context, *connect_go.Request[sdp_go.DeleteBookmarkRequest]) (*connect_go.Response[sdp_go.DeleteBookmarkResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("BookmarksService.DeleteBookmark is not implemented"))
}
