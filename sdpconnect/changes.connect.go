// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: changes.proto

package sdpconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	sdp_go "github.com/overmindtech/sdp-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ChangesServiceName is the fully-qualified name of the ChangesService service.
	ChangesServiceName = "changes.ChangesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ChangesServiceListAppsProcedure is the fully-qualified name of the ChangesService's ListApps RPC.
	ChangesServiceListAppsProcedure = "/changes.ChangesService/ListApps"
	// ChangesServiceCreateAppProcedure is the fully-qualified name of the ChangesService's CreateApp
	// RPC.
	ChangesServiceCreateAppProcedure = "/changes.ChangesService/CreateApp"
	// ChangesServiceGetAppProcedure is the fully-qualified name of the ChangesService's GetApp RPC.
	ChangesServiceGetAppProcedure = "/changes.ChangesService/GetApp"
	// ChangesServiceUpdateAppProcedure is the fully-qualified name of the ChangesService's UpdateApp
	// RPC.
	ChangesServiceUpdateAppProcedure = "/changes.ChangesService/UpdateApp"
	// ChangesServiceDeleteAppProcedure is the fully-qualified name of the ChangesService's DeleteApp
	// RPC.
	ChangesServiceDeleteAppProcedure = "/changes.ChangesService/DeleteApp"
	// ChangesServiceListChangesProcedure is the fully-qualified name of the ChangesService's
	// ListChanges RPC.
	ChangesServiceListChangesProcedure = "/changes.ChangesService/ListChanges"
	// ChangesServiceCreateChangeProcedure is the fully-qualified name of the ChangesService's
	// CreateChange RPC.
	ChangesServiceCreateChangeProcedure = "/changes.ChangesService/CreateChange"
	// ChangesServiceGetChangeProcedure is the fully-qualified name of the ChangesService's GetChange
	// RPC.
	ChangesServiceGetChangeProcedure = "/changes.ChangesService/GetChange"
	// ChangesServiceUpdateChangeProcedure is the fully-qualified name of the ChangesService's
	// UpdateChange RPC.
	ChangesServiceUpdateChangeProcedure = "/changes.ChangesService/UpdateChange"
	// ChangesServiceDeleteChangeProcedure is the fully-qualified name of the ChangesService's
	// DeleteChange RPC.
	ChangesServiceDeleteChangeProcedure = "/changes.ChangesService/DeleteChange"
	// ChangesServiceCalculateBlastRadiusProcedure is the fully-qualified name of the ChangesService's
	// CalculateBlastRadius RPC.
	ChangesServiceCalculateBlastRadiusProcedure = "/changes.ChangesService/CalculateBlastRadius"
	// ChangesServiceStartChangeProcedure is the fully-qualified name of the ChangesService's
	// StartChange RPC.
	ChangesServiceStartChangeProcedure = "/changes.ChangesService/StartChange"
	// ChangesServiceEndChangeProcedure is the fully-qualified name of the ChangesService's EndChange
	// RPC.
	ChangesServiceEndChangeProcedure = "/changes.ChangesService/EndChange"
	// ChangesServiceGetOnboardingProcedure is the fully-qualified name of the ChangesService's
	// GetOnboarding RPC.
	ChangesServiceGetOnboardingProcedure = "/changes.ChangesService/GetOnboarding"
	// ChangesServiceUpdateOnboardingProcedure is the fully-qualified name of the ChangesService's
	// UpdateOnboarding RPC.
	ChangesServiceUpdateOnboardingProcedure = "/changes.ChangesService/UpdateOnboarding"
	// ChangesServiceGetChangesHomeProcedure is the fully-qualified name of the ChangesService's
	// GetChangesHome RPC.
	ChangesServiceGetChangesHomeProcedure = "/changes.ChangesService/GetChangesHome"
	// ChangesServiceListAppChangesProcedure is the fully-qualified name of the ChangesService's
	// ListAppChanges RPC.
	ChangesServiceListAppChangesProcedure = "/changes.ChangesService/ListAppChanges"
)

// ChangesServiceClient is a client for the changes.ChangesService service.
type ChangesServiceClient interface {
	// Lists all apps
	ListApps(context.Context, *connect_go.Request[sdp_go.ListAppsRequest]) (*connect_go.Response[sdp_go.ListAppsResponse], error)
	// Creates a new app
	CreateApp(context.Context, *connect_go.Request[sdp_go.CreateAppRequest]) (*connect_go.Response[sdp_go.CreateAppResponse], error)
	// Gets the details of an existing app
	GetApp(context.Context, *connect_go.Request[sdp_go.GetAppRequest]) (*connect_go.Response[sdp_go.GetAppResponse], error)
	// Updates an existing app
	UpdateApp(context.Context, *connect_go.Request[sdp_go.UpdateAppRequest]) (*connect_go.Response[sdp_go.UpdateAppResponse], error)
	// Deletes an app
	DeleteApp(context.Context, *connect_go.Request[sdp_go.DeleteAppRequest]) (*connect_go.Response[sdp_go.DeleteAppResponse], error)
	// Lists all changes
	ListChanges(context.Context, *connect_go.Request[sdp_go.ListChangesRequest]) (*connect_go.Response[sdp_go.ListChangesResponse], error)
	// Creates a new change
	CreateChange(context.Context, *connect_go.Request[sdp_go.CreateChangeRequest]) (*connect_go.Response[sdp_go.CreateChangeResponse], error)
	// Gets the details of an existing change
	GetChange(context.Context, *connect_go.Request[sdp_go.GetChangeRequest]) (*connect_go.Response[sdp_go.GetChangeResponse], error)
	// Updates an existing change
	UpdateChange(context.Context, *connect_go.Request[sdp_go.UpdateChangeRequest]) (*connect_go.Response[sdp_go.UpdateChangeResponse], error)
	// Deletes a change
	DeleteChange(context.Context, *connect_go.Request[sdp_go.DeleteChangeRequest]) (*connect_go.Response[sdp_go.DeleteChangeResponse], error)
	// Calculates the blast radius of a change using the
	// `affectedItemsBookmarkUUID` as the starting point. If the
	// `affectedItemsBookmarkUUID` is blank, this will return an error.
	// Returns a stream of status updates. The response stream closes when all calculating has been done.
	// Executing this RPC will move the Change to the `STATUS_DEFINING` state or return an error.
	CalculateBlastRadius(context.Context, *connect_go.Request[sdp_go.CalculateBlastRadiusRequest]) (*connect_go.ServerStreamForClient[sdp_go.CalculateBlastRadiusResponse], error)
	// Executing this RPC take a snapshot of the current blast radius and store it
	// in `systemBeforeSnapshotUUID` and then advance the status to
	// `STATUS_HAPPENING`. It can only be called once per change.
	StartChange(context.Context, *connect_go.Request[sdp_go.StartChangeRequest]) (*connect_go.ServerStreamForClient[sdp_go.StartChangeResponse], error)
	// Takes the "after" snapshot, stores it in `systemAfterSnapshotUUID` and
	// advances the change status to `STATUS_DONE`
	EndChange(context.Context, *connect_go.Request[sdp_go.EndChangeRequest]) (*connect_go.ServerStreamForClient[sdp_go.EndChangeResponse], error)
	GetOnboarding(context.Context, *connect_go.Request[sdp_go.GetOnboardingRequest]) (*connect_go.Response[sdp_go.GetOnboardingResponse], error)
	UpdateOnboarding(context.Context, *connect_go.Request[sdp_go.UpdateOnboardingRequest]) (*connect_go.Response[sdp_go.UpdateOnboardingResponse], error)
	GetChangesHome(context.Context, *connect_go.Request[sdp_go.GetChangesHomeRequest]) (*connect_go.Response[sdp_go.GetChangesHomeResponse], error)
	ListAppChanges(context.Context, *connect_go.Request[sdp_go.ListAppChangesRequest]) (*connect_go.Response[sdp_go.ListAppChangesResponse], error)
}

// NewChangesServiceClient constructs a client for the changes.ChangesService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewChangesServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ChangesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &changesServiceClient{
		listApps: connect_go.NewClient[sdp_go.ListAppsRequest, sdp_go.ListAppsResponse](
			httpClient,
			baseURL+ChangesServiceListAppsProcedure,
			opts...,
		),
		createApp: connect_go.NewClient[sdp_go.CreateAppRequest, sdp_go.CreateAppResponse](
			httpClient,
			baseURL+ChangesServiceCreateAppProcedure,
			opts...,
		),
		getApp: connect_go.NewClient[sdp_go.GetAppRequest, sdp_go.GetAppResponse](
			httpClient,
			baseURL+ChangesServiceGetAppProcedure,
			opts...,
		),
		updateApp: connect_go.NewClient[sdp_go.UpdateAppRequest, sdp_go.UpdateAppResponse](
			httpClient,
			baseURL+ChangesServiceUpdateAppProcedure,
			opts...,
		),
		deleteApp: connect_go.NewClient[sdp_go.DeleteAppRequest, sdp_go.DeleteAppResponse](
			httpClient,
			baseURL+ChangesServiceDeleteAppProcedure,
			opts...,
		),
		listChanges: connect_go.NewClient[sdp_go.ListChangesRequest, sdp_go.ListChangesResponse](
			httpClient,
			baseURL+ChangesServiceListChangesProcedure,
			opts...,
		),
		createChange: connect_go.NewClient[sdp_go.CreateChangeRequest, sdp_go.CreateChangeResponse](
			httpClient,
			baseURL+ChangesServiceCreateChangeProcedure,
			opts...,
		),
		getChange: connect_go.NewClient[sdp_go.GetChangeRequest, sdp_go.GetChangeResponse](
			httpClient,
			baseURL+ChangesServiceGetChangeProcedure,
			opts...,
		),
		updateChange: connect_go.NewClient[sdp_go.UpdateChangeRequest, sdp_go.UpdateChangeResponse](
			httpClient,
			baseURL+ChangesServiceUpdateChangeProcedure,
			opts...,
		),
		deleteChange: connect_go.NewClient[sdp_go.DeleteChangeRequest, sdp_go.DeleteChangeResponse](
			httpClient,
			baseURL+ChangesServiceDeleteChangeProcedure,
			opts...,
		),
		calculateBlastRadius: connect_go.NewClient[sdp_go.CalculateBlastRadiusRequest, sdp_go.CalculateBlastRadiusResponse](
			httpClient,
			baseURL+ChangesServiceCalculateBlastRadiusProcedure,
			opts...,
		),
		startChange: connect_go.NewClient[sdp_go.StartChangeRequest, sdp_go.StartChangeResponse](
			httpClient,
			baseURL+ChangesServiceStartChangeProcedure,
			opts...,
		),
		endChange: connect_go.NewClient[sdp_go.EndChangeRequest, sdp_go.EndChangeResponse](
			httpClient,
			baseURL+ChangesServiceEndChangeProcedure,
			opts...,
		),
		getOnboarding: connect_go.NewClient[sdp_go.GetOnboardingRequest, sdp_go.GetOnboardingResponse](
			httpClient,
			baseURL+ChangesServiceGetOnboardingProcedure,
			opts...,
		),
		updateOnboarding: connect_go.NewClient[sdp_go.UpdateOnboardingRequest, sdp_go.UpdateOnboardingResponse](
			httpClient,
			baseURL+ChangesServiceUpdateOnboardingProcedure,
			opts...,
		),
		getChangesHome: connect_go.NewClient[sdp_go.GetChangesHomeRequest, sdp_go.GetChangesHomeResponse](
			httpClient,
			baseURL+ChangesServiceGetChangesHomeProcedure,
			opts...,
		),
		listAppChanges: connect_go.NewClient[sdp_go.ListAppChangesRequest, sdp_go.ListAppChangesResponse](
			httpClient,
			baseURL+ChangesServiceListAppChangesProcedure,
			opts...,
		),
	}
}

// changesServiceClient implements ChangesServiceClient.
type changesServiceClient struct {
	listApps             *connect_go.Client[sdp_go.ListAppsRequest, sdp_go.ListAppsResponse]
	createApp            *connect_go.Client[sdp_go.CreateAppRequest, sdp_go.CreateAppResponse]
	getApp               *connect_go.Client[sdp_go.GetAppRequest, sdp_go.GetAppResponse]
	updateApp            *connect_go.Client[sdp_go.UpdateAppRequest, sdp_go.UpdateAppResponse]
	deleteApp            *connect_go.Client[sdp_go.DeleteAppRequest, sdp_go.DeleteAppResponse]
	listChanges          *connect_go.Client[sdp_go.ListChangesRequest, sdp_go.ListChangesResponse]
	createChange         *connect_go.Client[sdp_go.CreateChangeRequest, sdp_go.CreateChangeResponse]
	getChange            *connect_go.Client[sdp_go.GetChangeRequest, sdp_go.GetChangeResponse]
	updateChange         *connect_go.Client[sdp_go.UpdateChangeRequest, sdp_go.UpdateChangeResponse]
	deleteChange         *connect_go.Client[sdp_go.DeleteChangeRequest, sdp_go.DeleteChangeResponse]
	calculateBlastRadius *connect_go.Client[sdp_go.CalculateBlastRadiusRequest, sdp_go.CalculateBlastRadiusResponse]
	startChange          *connect_go.Client[sdp_go.StartChangeRequest, sdp_go.StartChangeResponse]
	endChange            *connect_go.Client[sdp_go.EndChangeRequest, sdp_go.EndChangeResponse]
	getOnboarding        *connect_go.Client[sdp_go.GetOnboardingRequest, sdp_go.GetOnboardingResponse]
	updateOnboarding     *connect_go.Client[sdp_go.UpdateOnboardingRequest, sdp_go.UpdateOnboardingResponse]
	getChangesHome       *connect_go.Client[sdp_go.GetChangesHomeRequest, sdp_go.GetChangesHomeResponse]
	listAppChanges       *connect_go.Client[sdp_go.ListAppChangesRequest, sdp_go.ListAppChangesResponse]
}

// ListApps calls changes.ChangesService.ListApps.
func (c *changesServiceClient) ListApps(ctx context.Context, req *connect_go.Request[sdp_go.ListAppsRequest]) (*connect_go.Response[sdp_go.ListAppsResponse], error) {
	return c.listApps.CallUnary(ctx, req)
}

// CreateApp calls changes.ChangesService.CreateApp.
func (c *changesServiceClient) CreateApp(ctx context.Context, req *connect_go.Request[sdp_go.CreateAppRequest]) (*connect_go.Response[sdp_go.CreateAppResponse], error) {
	return c.createApp.CallUnary(ctx, req)
}

// GetApp calls changes.ChangesService.GetApp.
func (c *changesServiceClient) GetApp(ctx context.Context, req *connect_go.Request[sdp_go.GetAppRequest]) (*connect_go.Response[sdp_go.GetAppResponse], error) {
	return c.getApp.CallUnary(ctx, req)
}

// UpdateApp calls changes.ChangesService.UpdateApp.
func (c *changesServiceClient) UpdateApp(ctx context.Context, req *connect_go.Request[sdp_go.UpdateAppRequest]) (*connect_go.Response[sdp_go.UpdateAppResponse], error) {
	return c.updateApp.CallUnary(ctx, req)
}

// DeleteApp calls changes.ChangesService.DeleteApp.
func (c *changesServiceClient) DeleteApp(ctx context.Context, req *connect_go.Request[sdp_go.DeleteAppRequest]) (*connect_go.Response[sdp_go.DeleteAppResponse], error) {
	return c.deleteApp.CallUnary(ctx, req)
}

// ListChanges calls changes.ChangesService.ListChanges.
func (c *changesServiceClient) ListChanges(ctx context.Context, req *connect_go.Request[sdp_go.ListChangesRequest]) (*connect_go.Response[sdp_go.ListChangesResponse], error) {
	return c.listChanges.CallUnary(ctx, req)
}

// CreateChange calls changes.ChangesService.CreateChange.
func (c *changesServiceClient) CreateChange(ctx context.Context, req *connect_go.Request[sdp_go.CreateChangeRequest]) (*connect_go.Response[sdp_go.CreateChangeResponse], error) {
	return c.createChange.CallUnary(ctx, req)
}

// GetChange calls changes.ChangesService.GetChange.
func (c *changesServiceClient) GetChange(ctx context.Context, req *connect_go.Request[sdp_go.GetChangeRequest]) (*connect_go.Response[sdp_go.GetChangeResponse], error) {
	return c.getChange.CallUnary(ctx, req)
}

// UpdateChange calls changes.ChangesService.UpdateChange.
func (c *changesServiceClient) UpdateChange(ctx context.Context, req *connect_go.Request[sdp_go.UpdateChangeRequest]) (*connect_go.Response[sdp_go.UpdateChangeResponse], error) {
	return c.updateChange.CallUnary(ctx, req)
}

// DeleteChange calls changes.ChangesService.DeleteChange.
func (c *changesServiceClient) DeleteChange(ctx context.Context, req *connect_go.Request[sdp_go.DeleteChangeRequest]) (*connect_go.Response[sdp_go.DeleteChangeResponse], error) {
	return c.deleteChange.CallUnary(ctx, req)
}

// CalculateBlastRadius calls changes.ChangesService.CalculateBlastRadius.
func (c *changesServiceClient) CalculateBlastRadius(ctx context.Context, req *connect_go.Request[sdp_go.CalculateBlastRadiusRequest]) (*connect_go.ServerStreamForClient[sdp_go.CalculateBlastRadiusResponse], error) {
	return c.calculateBlastRadius.CallServerStream(ctx, req)
}

// StartChange calls changes.ChangesService.StartChange.
func (c *changesServiceClient) StartChange(ctx context.Context, req *connect_go.Request[sdp_go.StartChangeRequest]) (*connect_go.ServerStreamForClient[sdp_go.StartChangeResponse], error) {
	return c.startChange.CallServerStream(ctx, req)
}

// EndChange calls changes.ChangesService.EndChange.
func (c *changesServiceClient) EndChange(ctx context.Context, req *connect_go.Request[sdp_go.EndChangeRequest]) (*connect_go.ServerStreamForClient[sdp_go.EndChangeResponse], error) {
	return c.endChange.CallServerStream(ctx, req)
}

// GetOnboarding calls changes.ChangesService.GetOnboarding.
func (c *changesServiceClient) GetOnboarding(ctx context.Context, req *connect_go.Request[sdp_go.GetOnboardingRequest]) (*connect_go.Response[sdp_go.GetOnboardingResponse], error) {
	return c.getOnboarding.CallUnary(ctx, req)
}

// UpdateOnboarding calls changes.ChangesService.UpdateOnboarding.
func (c *changesServiceClient) UpdateOnboarding(ctx context.Context, req *connect_go.Request[sdp_go.UpdateOnboardingRequest]) (*connect_go.Response[sdp_go.UpdateOnboardingResponse], error) {
	return c.updateOnboarding.CallUnary(ctx, req)
}

// GetChangesHome calls changes.ChangesService.GetChangesHome.
func (c *changesServiceClient) GetChangesHome(ctx context.Context, req *connect_go.Request[sdp_go.GetChangesHomeRequest]) (*connect_go.Response[sdp_go.GetChangesHomeResponse], error) {
	return c.getChangesHome.CallUnary(ctx, req)
}

// ListAppChanges calls changes.ChangesService.ListAppChanges.
func (c *changesServiceClient) ListAppChanges(ctx context.Context, req *connect_go.Request[sdp_go.ListAppChangesRequest]) (*connect_go.Response[sdp_go.ListAppChangesResponse], error) {
	return c.listAppChanges.CallUnary(ctx, req)
}

// ChangesServiceHandler is an implementation of the changes.ChangesService service.
type ChangesServiceHandler interface {
	// Lists all apps
	ListApps(context.Context, *connect_go.Request[sdp_go.ListAppsRequest]) (*connect_go.Response[sdp_go.ListAppsResponse], error)
	// Creates a new app
	CreateApp(context.Context, *connect_go.Request[sdp_go.CreateAppRequest]) (*connect_go.Response[sdp_go.CreateAppResponse], error)
	// Gets the details of an existing app
	GetApp(context.Context, *connect_go.Request[sdp_go.GetAppRequest]) (*connect_go.Response[sdp_go.GetAppResponse], error)
	// Updates an existing app
	UpdateApp(context.Context, *connect_go.Request[sdp_go.UpdateAppRequest]) (*connect_go.Response[sdp_go.UpdateAppResponse], error)
	// Deletes an app
	DeleteApp(context.Context, *connect_go.Request[sdp_go.DeleteAppRequest]) (*connect_go.Response[sdp_go.DeleteAppResponse], error)
	// Lists all changes
	ListChanges(context.Context, *connect_go.Request[sdp_go.ListChangesRequest]) (*connect_go.Response[sdp_go.ListChangesResponse], error)
	// Creates a new change
	CreateChange(context.Context, *connect_go.Request[sdp_go.CreateChangeRequest]) (*connect_go.Response[sdp_go.CreateChangeResponse], error)
	// Gets the details of an existing change
	GetChange(context.Context, *connect_go.Request[sdp_go.GetChangeRequest]) (*connect_go.Response[sdp_go.GetChangeResponse], error)
	// Updates an existing change
	UpdateChange(context.Context, *connect_go.Request[sdp_go.UpdateChangeRequest]) (*connect_go.Response[sdp_go.UpdateChangeResponse], error)
	// Deletes a change
	DeleteChange(context.Context, *connect_go.Request[sdp_go.DeleteChangeRequest]) (*connect_go.Response[sdp_go.DeleteChangeResponse], error)
	// Calculates the blast radius of a change using the
	// `affectedItemsBookmarkUUID` as the starting point. If the
	// `affectedItemsBookmarkUUID` is blank, this will return an error.
	// Returns a stream of status updates. The response stream closes when all calculating has been done.
	// Executing this RPC will move the Change to the `STATUS_DEFINING` state or return an error.
	CalculateBlastRadius(context.Context, *connect_go.Request[sdp_go.CalculateBlastRadiusRequest], *connect_go.ServerStream[sdp_go.CalculateBlastRadiusResponse]) error
	// Executing this RPC take a snapshot of the current blast radius and store it
	// in `systemBeforeSnapshotUUID` and then advance the status to
	// `STATUS_HAPPENING`. It can only be called once per change.
	StartChange(context.Context, *connect_go.Request[sdp_go.StartChangeRequest], *connect_go.ServerStream[sdp_go.StartChangeResponse]) error
	// Takes the "after" snapshot, stores it in `systemAfterSnapshotUUID` and
	// advances the change status to `STATUS_DONE`
	EndChange(context.Context, *connect_go.Request[sdp_go.EndChangeRequest], *connect_go.ServerStream[sdp_go.EndChangeResponse]) error
	GetOnboarding(context.Context, *connect_go.Request[sdp_go.GetOnboardingRequest]) (*connect_go.Response[sdp_go.GetOnboardingResponse], error)
	UpdateOnboarding(context.Context, *connect_go.Request[sdp_go.UpdateOnboardingRequest]) (*connect_go.Response[sdp_go.UpdateOnboardingResponse], error)
	GetChangesHome(context.Context, *connect_go.Request[sdp_go.GetChangesHomeRequest]) (*connect_go.Response[sdp_go.GetChangesHomeResponse], error)
	ListAppChanges(context.Context, *connect_go.Request[sdp_go.ListAppChangesRequest]) (*connect_go.Response[sdp_go.ListAppChangesResponse], error)
}

// NewChangesServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewChangesServiceHandler(svc ChangesServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(ChangesServiceListAppsProcedure, connect_go.NewUnaryHandler(
		ChangesServiceListAppsProcedure,
		svc.ListApps,
		opts...,
	))
	mux.Handle(ChangesServiceCreateAppProcedure, connect_go.NewUnaryHandler(
		ChangesServiceCreateAppProcedure,
		svc.CreateApp,
		opts...,
	))
	mux.Handle(ChangesServiceGetAppProcedure, connect_go.NewUnaryHandler(
		ChangesServiceGetAppProcedure,
		svc.GetApp,
		opts...,
	))
	mux.Handle(ChangesServiceUpdateAppProcedure, connect_go.NewUnaryHandler(
		ChangesServiceUpdateAppProcedure,
		svc.UpdateApp,
		opts...,
	))
	mux.Handle(ChangesServiceDeleteAppProcedure, connect_go.NewUnaryHandler(
		ChangesServiceDeleteAppProcedure,
		svc.DeleteApp,
		opts...,
	))
	mux.Handle(ChangesServiceListChangesProcedure, connect_go.NewUnaryHandler(
		ChangesServiceListChangesProcedure,
		svc.ListChanges,
		opts...,
	))
	mux.Handle(ChangesServiceCreateChangeProcedure, connect_go.NewUnaryHandler(
		ChangesServiceCreateChangeProcedure,
		svc.CreateChange,
		opts...,
	))
	mux.Handle(ChangesServiceGetChangeProcedure, connect_go.NewUnaryHandler(
		ChangesServiceGetChangeProcedure,
		svc.GetChange,
		opts...,
	))
	mux.Handle(ChangesServiceUpdateChangeProcedure, connect_go.NewUnaryHandler(
		ChangesServiceUpdateChangeProcedure,
		svc.UpdateChange,
		opts...,
	))
	mux.Handle(ChangesServiceDeleteChangeProcedure, connect_go.NewUnaryHandler(
		ChangesServiceDeleteChangeProcedure,
		svc.DeleteChange,
		opts...,
	))
	mux.Handle(ChangesServiceCalculateBlastRadiusProcedure, connect_go.NewServerStreamHandler(
		ChangesServiceCalculateBlastRadiusProcedure,
		svc.CalculateBlastRadius,
		opts...,
	))
	mux.Handle(ChangesServiceStartChangeProcedure, connect_go.NewServerStreamHandler(
		ChangesServiceStartChangeProcedure,
		svc.StartChange,
		opts...,
	))
	mux.Handle(ChangesServiceEndChangeProcedure, connect_go.NewServerStreamHandler(
		ChangesServiceEndChangeProcedure,
		svc.EndChange,
		opts...,
	))
	mux.Handle(ChangesServiceGetOnboardingProcedure, connect_go.NewUnaryHandler(
		ChangesServiceGetOnboardingProcedure,
		svc.GetOnboarding,
		opts...,
	))
	mux.Handle(ChangesServiceUpdateOnboardingProcedure, connect_go.NewUnaryHandler(
		ChangesServiceUpdateOnboardingProcedure,
		svc.UpdateOnboarding,
		opts...,
	))
	mux.Handle(ChangesServiceGetChangesHomeProcedure, connect_go.NewUnaryHandler(
		ChangesServiceGetChangesHomeProcedure,
		svc.GetChangesHome,
		opts...,
	))
	mux.Handle(ChangesServiceListAppChangesProcedure, connect_go.NewUnaryHandler(
		ChangesServiceListAppChangesProcedure,
		svc.ListAppChanges,
		opts...,
	))
	return "/changes.ChangesService/", mux
}

// UnimplementedChangesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedChangesServiceHandler struct{}

func (UnimplementedChangesServiceHandler) ListApps(context.Context, *connect_go.Request[sdp_go.ListAppsRequest]) (*connect_go.Response[sdp_go.ListAppsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("changes.ChangesService.ListApps is not implemented"))
}

func (UnimplementedChangesServiceHandler) CreateApp(context.Context, *connect_go.Request[sdp_go.CreateAppRequest]) (*connect_go.Response[sdp_go.CreateAppResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("changes.ChangesService.CreateApp is not implemented"))
}

func (UnimplementedChangesServiceHandler) GetApp(context.Context, *connect_go.Request[sdp_go.GetAppRequest]) (*connect_go.Response[sdp_go.GetAppResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("changes.ChangesService.GetApp is not implemented"))
}

func (UnimplementedChangesServiceHandler) UpdateApp(context.Context, *connect_go.Request[sdp_go.UpdateAppRequest]) (*connect_go.Response[sdp_go.UpdateAppResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("changes.ChangesService.UpdateApp is not implemented"))
}

func (UnimplementedChangesServiceHandler) DeleteApp(context.Context, *connect_go.Request[sdp_go.DeleteAppRequest]) (*connect_go.Response[sdp_go.DeleteAppResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("changes.ChangesService.DeleteApp is not implemented"))
}

func (UnimplementedChangesServiceHandler) ListChanges(context.Context, *connect_go.Request[sdp_go.ListChangesRequest]) (*connect_go.Response[sdp_go.ListChangesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("changes.ChangesService.ListChanges is not implemented"))
}

func (UnimplementedChangesServiceHandler) CreateChange(context.Context, *connect_go.Request[sdp_go.CreateChangeRequest]) (*connect_go.Response[sdp_go.CreateChangeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("changes.ChangesService.CreateChange is not implemented"))
}

func (UnimplementedChangesServiceHandler) GetChange(context.Context, *connect_go.Request[sdp_go.GetChangeRequest]) (*connect_go.Response[sdp_go.GetChangeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("changes.ChangesService.GetChange is not implemented"))
}

func (UnimplementedChangesServiceHandler) UpdateChange(context.Context, *connect_go.Request[sdp_go.UpdateChangeRequest]) (*connect_go.Response[sdp_go.UpdateChangeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("changes.ChangesService.UpdateChange is not implemented"))
}

func (UnimplementedChangesServiceHandler) DeleteChange(context.Context, *connect_go.Request[sdp_go.DeleteChangeRequest]) (*connect_go.Response[sdp_go.DeleteChangeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("changes.ChangesService.DeleteChange is not implemented"))
}

func (UnimplementedChangesServiceHandler) CalculateBlastRadius(context.Context, *connect_go.Request[sdp_go.CalculateBlastRadiusRequest], *connect_go.ServerStream[sdp_go.CalculateBlastRadiusResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("changes.ChangesService.CalculateBlastRadius is not implemented"))
}

func (UnimplementedChangesServiceHandler) StartChange(context.Context, *connect_go.Request[sdp_go.StartChangeRequest], *connect_go.ServerStream[sdp_go.StartChangeResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("changes.ChangesService.StartChange is not implemented"))
}

func (UnimplementedChangesServiceHandler) EndChange(context.Context, *connect_go.Request[sdp_go.EndChangeRequest], *connect_go.ServerStream[sdp_go.EndChangeResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("changes.ChangesService.EndChange is not implemented"))
}

func (UnimplementedChangesServiceHandler) GetOnboarding(context.Context, *connect_go.Request[sdp_go.GetOnboardingRequest]) (*connect_go.Response[sdp_go.GetOnboardingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("changes.ChangesService.GetOnboarding is not implemented"))
}

func (UnimplementedChangesServiceHandler) UpdateOnboarding(context.Context, *connect_go.Request[sdp_go.UpdateOnboardingRequest]) (*connect_go.Response[sdp_go.UpdateOnboardingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("changes.ChangesService.UpdateOnboarding is not implemented"))
}

func (UnimplementedChangesServiceHandler) GetChangesHome(context.Context, *connect_go.Request[sdp_go.GetChangesHomeRequest]) (*connect_go.Response[sdp_go.GetChangesHomeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("changes.ChangesService.GetChangesHome is not implemented"))
}

func (UnimplementedChangesServiceHandler) ListAppChanges(context.Context, *connect_go.Request[sdp_go.ListAppChangesRequest]) (*connect_go.Response[sdp_go.ListAppChangesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("changes.ChangesService.ListAppChanges is not implemented"))
}
