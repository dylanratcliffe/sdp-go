// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: config.proto

package sdpconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	sdp_go "github.com/overmindtech/sdp-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ConfigServiceName is the fully-qualified name of the ConfigService service.
	ConfigServiceName = "config.ConfigService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ConfigServiceGetAccountConfigProcedure is the fully-qualified name of the ConfigService's
	// GetAccountConfig RPC.
	ConfigServiceGetAccountConfigProcedure = "/config.ConfigService/GetAccountConfig"
	// ConfigServiceUpdateAccountConfigProcedure is the fully-qualified name of the ConfigService's
	// UpdateAccountConfig RPC.
	ConfigServiceUpdateAccountConfigProcedure = "/config.ConfigService/UpdateAccountConfig"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	configServiceServiceDescriptor                   = sdp_go.File_config_proto.Services().ByName("ConfigService")
	configServiceGetAccountConfigMethodDescriptor    = configServiceServiceDescriptor.Methods().ByName("GetAccountConfig")
	configServiceUpdateAccountConfigMethodDescriptor = configServiceServiceDescriptor.Methods().ByName("UpdateAccountConfig")
)

// ConfigServiceClient is a client for the config.ConfigService service.
type ConfigServiceClient interface {
	// Get the account config for the user's account
	GetAccountConfig(context.Context, *connect.Request[sdp_go.GetAccountConfigRequest]) (*connect.Response[sdp_go.GetAccountConfigResponse], error)
	// Update the account config for the user's account
	UpdateAccountConfig(context.Context, *connect.Request[sdp_go.UpdateAccountConfigRequest]) (*connect.Response[sdp_go.UpdateAccountConfigResponse], error)
}

// NewConfigServiceClient constructs a client for the config.ConfigService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConfigServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ConfigServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &configServiceClient{
		getAccountConfig: connect.NewClient[sdp_go.GetAccountConfigRequest, sdp_go.GetAccountConfigResponse](
			httpClient,
			baseURL+ConfigServiceGetAccountConfigProcedure,
			connect.WithSchema(configServiceGetAccountConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateAccountConfig: connect.NewClient[sdp_go.UpdateAccountConfigRequest, sdp_go.UpdateAccountConfigResponse](
			httpClient,
			baseURL+ConfigServiceUpdateAccountConfigProcedure,
			connect.WithSchema(configServiceUpdateAccountConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// configServiceClient implements ConfigServiceClient.
type configServiceClient struct {
	getAccountConfig    *connect.Client[sdp_go.GetAccountConfigRequest, sdp_go.GetAccountConfigResponse]
	updateAccountConfig *connect.Client[sdp_go.UpdateAccountConfigRequest, sdp_go.UpdateAccountConfigResponse]
}

// GetAccountConfig calls config.ConfigService.GetAccountConfig.
func (c *configServiceClient) GetAccountConfig(ctx context.Context, req *connect.Request[sdp_go.GetAccountConfigRequest]) (*connect.Response[sdp_go.GetAccountConfigResponse], error) {
	return c.getAccountConfig.CallUnary(ctx, req)
}

// UpdateAccountConfig calls config.ConfigService.UpdateAccountConfig.
func (c *configServiceClient) UpdateAccountConfig(ctx context.Context, req *connect.Request[sdp_go.UpdateAccountConfigRequest]) (*connect.Response[sdp_go.UpdateAccountConfigResponse], error) {
	return c.updateAccountConfig.CallUnary(ctx, req)
}

// ConfigServiceHandler is an implementation of the config.ConfigService service.
type ConfigServiceHandler interface {
	// Get the account config for the user's account
	GetAccountConfig(context.Context, *connect.Request[sdp_go.GetAccountConfigRequest]) (*connect.Response[sdp_go.GetAccountConfigResponse], error)
	// Update the account config for the user's account
	UpdateAccountConfig(context.Context, *connect.Request[sdp_go.UpdateAccountConfigRequest]) (*connect.Response[sdp_go.UpdateAccountConfigResponse], error)
}

// NewConfigServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConfigServiceHandler(svc ConfigServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	configServiceGetAccountConfigHandler := connect.NewUnaryHandler(
		ConfigServiceGetAccountConfigProcedure,
		svc.GetAccountConfig,
		connect.WithSchema(configServiceGetAccountConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	configServiceUpdateAccountConfigHandler := connect.NewUnaryHandler(
		ConfigServiceUpdateAccountConfigProcedure,
		svc.UpdateAccountConfig,
		connect.WithSchema(configServiceUpdateAccountConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/config.ConfigService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ConfigServiceGetAccountConfigProcedure:
			configServiceGetAccountConfigHandler.ServeHTTP(w, r)
		case ConfigServiceUpdateAccountConfigProcedure:
			configServiceUpdateAccountConfigHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedConfigServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedConfigServiceHandler struct{}

func (UnimplementedConfigServiceHandler) GetAccountConfig(context.Context, *connect.Request[sdp_go.GetAccountConfigRequest]) (*connect.Response[sdp_go.GetAccountConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("config.ConfigService.GetAccountConfig is not implemented"))
}

func (UnimplementedConfigServiceHandler) UpdateAccountConfig(context.Context, *connect.Request[sdp_go.UpdateAccountConfigRequest]) (*connect.Response[sdp_go.UpdateAccountConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("config.ConfigService.UpdateAccountConfig is not implemented"))
}
