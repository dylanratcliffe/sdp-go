// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: snapshots.proto

package sdpconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	sdp_go "github.com/overmindtech/sdp-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SnapshotsServiceName is the fully-qualified name of the SnapshotsService service.
	SnapshotsServiceName = "SnapshotsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SnapshotsServiceListSnapshotsProcedure is the fully-qualified name of the SnapshotsService's
	// ListSnapshots RPC.
	SnapshotsServiceListSnapshotsProcedure = "/SnapshotsService/ListSnapshots"
	// SnapshotsServiceCreateSnapshotProcedure is the fully-qualified name of the SnapshotsService's
	// CreateSnapshot RPC.
	SnapshotsServiceCreateSnapshotProcedure = "/SnapshotsService/CreateSnapshot"
	// SnapshotsServiceGetSnapshotProcedure is the fully-qualified name of the SnapshotsService's
	// GetSnapshot RPC.
	SnapshotsServiceGetSnapshotProcedure = "/SnapshotsService/GetSnapshot"
	// SnapshotsServiceUpdateSnapshotProcedure is the fully-qualified name of the SnapshotsService's
	// UpdateSnapshot RPC.
	SnapshotsServiceUpdateSnapshotProcedure = "/SnapshotsService/UpdateSnapshot"
	// SnapshotsServiceDeleteSnapshotProcedure is the fully-qualified name of the SnapshotsService's
	// DeleteSnapshot RPC.
	SnapshotsServiceDeleteSnapshotProcedure = "/SnapshotsService/DeleteSnapshot"
)

// SnapshotsServiceClient is a client for the SnapshotsService service.
type SnapshotsServiceClient interface {
	ListSnapshots(context.Context, *connect_go.Request[sdp_go.ListSnapshotsRequest]) (*connect_go.Response[sdp_go.ListSnapshotResponse], error)
	CreateSnapshot(context.Context, *connect_go.Request[sdp_go.CreateSnapshotRequest]) (*connect_go.Response[sdp_go.CreateSnapshotResponse], error)
	GetSnapshot(context.Context, *connect_go.Request[sdp_go.GetSnapshotRequest]) (*connect_go.Response[sdp_go.GetSnapshotResponse], error)
	UpdateSnapshot(context.Context, *connect_go.Request[sdp_go.UpdateSnapshotRequest]) (*connect_go.Response[sdp_go.UpdateSnapshotResponse], error)
	DeleteSnapshot(context.Context, *connect_go.Request[sdp_go.DeleteSnapshotRequest]) (*connect_go.Response[sdp_go.DeleteSnapshotResponse], error)
}

// NewSnapshotsServiceClient constructs a client for the SnapshotsService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSnapshotsServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SnapshotsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &snapshotsServiceClient{
		listSnapshots: connect_go.NewClient[sdp_go.ListSnapshotsRequest, sdp_go.ListSnapshotResponse](
			httpClient,
			baseURL+SnapshotsServiceListSnapshotsProcedure,
			opts...,
		),
		createSnapshot: connect_go.NewClient[sdp_go.CreateSnapshotRequest, sdp_go.CreateSnapshotResponse](
			httpClient,
			baseURL+SnapshotsServiceCreateSnapshotProcedure,
			opts...,
		),
		getSnapshot: connect_go.NewClient[sdp_go.GetSnapshotRequest, sdp_go.GetSnapshotResponse](
			httpClient,
			baseURL+SnapshotsServiceGetSnapshotProcedure,
			opts...,
		),
		updateSnapshot: connect_go.NewClient[sdp_go.UpdateSnapshotRequest, sdp_go.UpdateSnapshotResponse](
			httpClient,
			baseURL+SnapshotsServiceUpdateSnapshotProcedure,
			opts...,
		),
		deleteSnapshot: connect_go.NewClient[sdp_go.DeleteSnapshotRequest, sdp_go.DeleteSnapshotResponse](
			httpClient,
			baseURL+SnapshotsServiceDeleteSnapshotProcedure,
			opts...,
		),
	}
}

// snapshotsServiceClient implements SnapshotsServiceClient.
type snapshotsServiceClient struct {
	listSnapshots  *connect_go.Client[sdp_go.ListSnapshotsRequest, sdp_go.ListSnapshotResponse]
	createSnapshot *connect_go.Client[sdp_go.CreateSnapshotRequest, sdp_go.CreateSnapshotResponse]
	getSnapshot    *connect_go.Client[sdp_go.GetSnapshotRequest, sdp_go.GetSnapshotResponse]
	updateSnapshot *connect_go.Client[sdp_go.UpdateSnapshotRequest, sdp_go.UpdateSnapshotResponse]
	deleteSnapshot *connect_go.Client[sdp_go.DeleteSnapshotRequest, sdp_go.DeleteSnapshotResponse]
}

// ListSnapshots calls SnapshotsService.ListSnapshots.
func (c *snapshotsServiceClient) ListSnapshots(ctx context.Context, req *connect_go.Request[sdp_go.ListSnapshotsRequest]) (*connect_go.Response[sdp_go.ListSnapshotResponse], error) {
	return c.listSnapshots.CallUnary(ctx, req)
}

// CreateSnapshot calls SnapshotsService.CreateSnapshot.
func (c *snapshotsServiceClient) CreateSnapshot(ctx context.Context, req *connect_go.Request[sdp_go.CreateSnapshotRequest]) (*connect_go.Response[sdp_go.CreateSnapshotResponse], error) {
	return c.createSnapshot.CallUnary(ctx, req)
}

// GetSnapshot calls SnapshotsService.GetSnapshot.
func (c *snapshotsServiceClient) GetSnapshot(ctx context.Context, req *connect_go.Request[sdp_go.GetSnapshotRequest]) (*connect_go.Response[sdp_go.GetSnapshotResponse], error) {
	return c.getSnapshot.CallUnary(ctx, req)
}

// UpdateSnapshot calls SnapshotsService.UpdateSnapshot.
func (c *snapshotsServiceClient) UpdateSnapshot(ctx context.Context, req *connect_go.Request[sdp_go.UpdateSnapshotRequest]) (*connect_go.Response[sdp_go.UpdateSnapshotResponse], error) {
	return c.updateSnapshot.CallUnary(ctx, req)
}

// DeleteSnapshot calls SnapshotsService.DeleteSnapshot.
func (c *snapshotsServiceClient) DeleteSnapshot(ctx context.Context, req *connect_go.Request[sdp_go.DeleteSnapshotRequest]) (*connect_go.Response[sdp_go.DeleteSnapshotResponse], error) {
	return c.deleteSnapshot.CallUnary(ctx, req)
}

// SnapshotsServiceHandler is an implementation of the SnapshotsService service.
type SnapshotsServiceHandler interface {
	ListSnapshots(context.Context, *connect_go.Request[sdp_go.ListSnapshotsRequest]) (*connect_go.Response[sdp_go.ListSnapshotResponse], error)
	CreateSnapshot(context.Context, *connect_go.Request[sdp_go.CreateSnapshotRequest]) (*connect_go.Response[sdp_go.CreateSnapshotResponse], error)
	GetSnapshot(context.Context, *connect_go.Request[sdp_go.GetSnapshotRequest]) (*connect_go.Response[sdp_go.GetSnapshotResponse], error)
	UpdateSnapshot(context.Context, *connect_go.Request[sdp_go.UpdateSnapshotRequest]) (*connect_go.Response[sdp_go.UpdateSnapshotResponse], error)
	DeleteSnapshot(context.Context, *connect_go.Request[sdp_go.DeleteSnapshotRequest]) (*connect_go.Response[sdp_go.DeleteSnapshotResponse], error)
}

// NewSnapshotsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSnapshotsServiceHandler(svc SnapshotsServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(SnapshotsServiceListSnapshotsProcedure, connect_go.NewUnaryHandler(
		SnapshotsServiceListSnapshotsProcedure,
		svc.ListSnapshots,
		opts...,
	))
	mux.Handle(SnapshotsServiceCreateSnapshotProcedure, connect_go.NewUnaryHandler(
		SnapshotsServiceCreateSnapshotProcedure,
		svc.CreateSnapshot,
		opts...,
	))
	mux.Handle(SnapshotsServiceGetSnapshotProcedure, connect_go.NewUnaryHandler(
		SnapshotsServiceGetSnapshotProcedure,
		svc.GetSnapshot,
		opts...,
	))
	mux.Handle(SnapshotsServiceUpdateSnapshotProcedure, connect_go.NewUnaryHandler(
		SnapshotsServiceUpdateSnapshotProcedure,
		svc.UpdateSnapshot,
		opts...,
	))
	mux.Handle(SnapshotsServiceDeleteSnapshotProcedure, connect_go.NewUnaryHandler(
		SnapshotsServiceDeleteSnapshotProcedure,
		svc.DeleteSnapshot,
		opts...,
	))
	return "/.SnapshotsService/", mux
}

// UnimplementedSnapshotsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSnapshotsServiceHandler struct{}

func (UnimplementedSnapshotsServiceHandler) ListSnapshots(context.Context, *connect_go.Request[sdp_go.ListSnapshotsRequest]) (*connect_go.Response[sdp_go.ListSnapshotResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("SnapshotsService.ListSnapshots is not implemented"))
}

func (UnimplementedSnapshotsServiceHandler) CreateSnapshot(context.Context, *connect_go.Request[sdp_go.CreateSnapshotRequest]) (*connect_go.Response[sdp_go.CreateSnapshotResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("SnapshotsService.CreateSnapshot is not implemented"))
}

func (UnimplementedSnapshotsServiceHandler) GetSnapshot(context.Context, *connect_go.Request[sdp_go.GetSnapshotRequest]) (*connect_go.Response[sdp_go.GetSnapshotResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("SnapshotsService.GetSnapshot is not implemented"))
}

func (UnimplementedSnapshotsServiceHandler) UpdateSnapshot(context.Context, *connect_go.Request[sdp_go.UpdateSnapshotRequest]) (*connect_go.Response[sdp_go.UpdateSnapshotResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("SnapshotsService.UpdateSnapshot is not implemented"))
}

func (UnimplementedSnapshotsServiceHandler) DeleteSnapshot(context.Context, *connect_go.Request[sdp_go.DeleteSnapshotRequest]) (*connect_go.Response[sdp_go.DeleteSnapshotResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("SnapshotsService.DeleteSnapshot is not implemented"))
}
